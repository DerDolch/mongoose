class User < ActiveRecord::Base

  STATUSES = ['Active','Inactive'].freeze

  acts_as_authentic
  
  # ================
  # = Associations =
  # ================
  has_and_belongs_to_many :teams
  
  # ================
  # = Named Scopes =
  # ================
  named_scope :not_on_team, lambda{|team_id| {:joins => "LEFT JOIN teams_users ON teams_users.user_id=users.id AND team_id=#{team_id}", :conditions => 'team_id IS NULL'}}
  
  # ===============
  # = Validations =
  # ===============
  validates_presence_of  :first_name, :last_name

  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  has_and_belongs_to_many :roles
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    @_list ||= self.roles.collect(&:name)
    return true if @_list.include?("admin")
    (@_list.include?(role_in_question.to_s) )
  end
  # ---------------------------------------
  
  # ====================
  # = Instance Methods =
  # ====================
  def full_name
    [first_name, last_name].compact.join(' ').squeeze(' ')
  end
end
